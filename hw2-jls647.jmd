---
title: "BEE 4750/5750 Homework 2"
author: "Jason Shao (jls647)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
import Pkg; Pkg.add("Roots")
```

# Problem 1

## Problem 1.1
```julia

#A function which takes distance x in km, and inital DO,BOD, and NOD concetrations and outputs the DO concentration at that distance
function C(x,Co,CBODo,NBODo)
#given values
ka=.55
kc=.35
kn=.25
Cs=10
U=6

#alpha value calculations
a1=exp(-ka*x/U)
a2=(kc/(ka-kc))*(exp(-kc*x/U)-exp(-ka*x/U))
a3=(kn/(ka-kn))*(exp(-kn*x/U)-exp(-ka*x/U))
DO=Cs*(1-a1)+Co*a1-CBODo*a2-NBODo*a3
return DO
end

#Decay of CBOD function
function CBOD(x,CBODo)
kc=.35
U=6
CBOD=CBODo*exp(-kc*x/U)
return CBOD
end

#Decay of NBOD function
function NBOD(x,NBODo)
kn=.35
U=6
NBOD=NBODo*exp(-kn*x/U)
return NBOD
end

```

To find initial concetration of DO:
```math
\begin{alignat*}{2}
& & C_{o1}=\frac{C_{River}*Q_{River}+C_{Waste 1}*Q_{Waste 1}}{Q_{River}+Q_{Waste 1}} \\
\end{alignat*}
```
```math
\begin{alignat*}{2}
& & C_{o1}=\frac{7.5 \frac{mg}{L}*10^8 \frac{L}{d}+5 \frac{mg}{L}*10^7 \frac{L}{d}}{10^8 \frac{L}{d}+10^7 \frac{L}{d}} = 7.27 \frac{mg}{L}\\
\end{alignat*}
```
The same process is done for CBOD and NBOD at the start of the first inflow and again at the second waste flow
```math
\begin{alignat*}{2}
& & CBOD_{o1}=\frac{5 \frac{mg}{L}*10^8 \frac{L}{d}+50 \frac{mg}{L}*10^7 \frac{L}{d}}{10^8 \frac{L}{d}+10^7 \frac{L}{d}} = 9.09 \frac{mg}{L}\\
\end{alignat*}
```
```math
\begin{alignat*}{2}
& & NBOD_{o1}=\frac{5 \frac{mg}{L}*10^8 \frac{L}{d}+35 \frac{mg}{L}*10^7 \frac{L}{d}}{10^8 \frac{L}{d}+10^7 \frac{L}{d}} = 7.72 \frac{mg}{L}\\
\end{alignat*}
```
```julia
using Plots, Distributions

DO=zeros(51); #initialize DO vector
DO[1]=7.27 ; #set initial DO concentration with both river inflow and waste source 1
for i=1:14
DO[i+1]=C(i,7.27,9.09,7.72); #calculate DO concentration for 1 to 14 km downstream
end

#calculate inital DO, BOD, and NOD concentrations of inflow diverging with waste source 2
CBODo2=(1.1*10^8*CBOD(15,9.09)+45*1.5*10^7)/(1.25*10^8);
NBODo2=(1.1*10^8*NBOD(15,7.72)+35*1.5*10^7)/(1.25*10^8);
DO[16]=(C(15,7.27,9.09,7.72)*1.1*10^8+1.5*10^7*5)/(1.25*10^8);

#using these initial values, calculate the DO concentration after waste source 2
for i=16:50
DO[i+1]=C(i-15,DO[16],CBODo2,NBODo2);
end

x=0:1:50; #vector of distance values

plot(x,DO, xguide="Distance downstream from first waste source, x (km)", yguide= "DO concentration (mg/L)", legend=false)

```
## Problem 1.2
Using the conditions at the input of the second waste stream as the initial conditions to find DO concentration, you can solve for the distance which achieves 6 mg/L.
Since the equation seems difficult to solve algebraically, you can find the distance finding the root of f(x)=C(x)-6. This can be one using the Roots package in Julia. A plot with a horizontal line at DO=6mg/L is shown to provide an inital guess of x.

```julia
using Roots

plot(x,DO, xguide="Distance downstream from first waste source, x (km)", yguide= "DO concentration (mg/L)", legend=false);
hline!([6])


ka=.55;
kc=.35;
kn=.25;
Cs=10;
U=6;
Co=DO[16];
CBODo=(1.1*10^8*CBOD(15,9.09)+45*1.5*10^7)/(1.25*10^8);
NBODo=(1.1*10^8*NBOD(15,7.72)+35*1.5*10^7)/(1.25*10^8);

f(x)=(Cs*(1-(exp(-ka*x/U)))+Co*(exp(-ka*x/U))-CBODo*((kc/(ka-kc))*(exp(-kc*x/U)-exp(-ka*x/U)))-NBODo*((kn/(ka-kn))*(exp(-kn*x/U)-exp(-ka*x/U))))-6
#redefine function with only one input, x
find_zero(f, 30)


```
Finding the root of the equation shows that at 25.0 km downstream from waste stream 2, the dissolved oxygen concentration rebounds back to 6 mg/L. 
## Problem 1.3
In order to find the treatment needed to prevent the dissolved oxygen concentration from dropping below 4 mg/L, you can test a range of treatment percentages and finding the treatment which has a minimum DO level just at or above 4 mg/L.

```julia



Co=DO[16]


minConc=zeros(20);
treatment=zeros(20);


for x=1:20
DOtreat=zeros(45);
CBODo=(1.1*10^8*CBOD(15,9.09)+45*(1-x*.01)*1.5*10^7)/(1.25*10^8);
NBODo=(1.1*10^8*NBOD(15,7.72)+35*(1-x*.01)*1.5*10^7)/(1.25*10^8);
for i=1:45
DOtreat[i]=C(i,Co,CBODo,NBODo)
end
minConc[x]=minimum(DOtreat);
treatment[x]=x*.01

end

minConc
treatment


```
A treatment of 5% removal will achieve a minimum DO concentration of 4.01 mg/L, just over 4 mg/L.
## Problem 1.4
Now the same can be done with treatment done at both waste streams. Treatment done at the first waste stream will affect the inital DO, CBOD, and NBOD concentrations at the second waste stream.

```julia

function C(x,Co,CBODo,NBODo)
#given values
ka=.55
kc=.35
kn=.25
Cs=10
U=6

#alpha value calculations
a1=exp(-ka*x/U)
a2=(kc/(ka-kc))*(exp(-kc*x/U)-exp(-ka*x/U))
a3=(kn/(ka-kn))*(exp(-kn*x/U)-exp(-ka*x/U))
DO=Cs*(1-a1)+Co*a1-CBODo*a2-NBODo*a3
return DO
end

#Decay of CBOD function
function CBOD(x,CBODo)
kc=.35
U=6
CBOD=CBODo*exp(-kc*x/U)
return CBOD
end

#Decay of NBOD function
function NBOD(x,NBODo)
kn=.35
U=6
NBOD=NBODo*exp(-kn*x/U)
return NBOD
end


minConc=zeros(11);
treatment=zeros(11);




for x=0:10
DOtreat=zeros(45);
CBODo1=(5*10^8+50*(1-x*.01)*10^7)/(1.1*10^8);
NBODo1=(5*10^8+35*(1-x*.01)*10^7)/(1.1*10^8);
Co2=(C(15,7.27,CBODo1,NBODo1)*1.1*10^8+1.5*10^7*5)/(1.25*10^8);
CBODo2=(1.1*10^8*CBOD(15,CBODo1)+45*(1-x*.01)*1.5*10^7)/(1.25*10^8);
NBODo2=(1.1*10^8*NBOD(15,NBODo1)+35*(1-x*.01)*1.5*10^7)/(1.25*10^8);
for i=1:45
DOtreat[i]=C(i,Co2,CBODo2,NBODo2)
end
minConc[x+1]=minimum(DOtreat);
treatment[x+1]=x*.01

end

minConc
treatment
```
A 3% treatment of both streams achieves a minimum DO concentration of 4.01 mg/L.
## Problem 1.5
I would treat each waste stream equally. This is because both waste streams contribute to the depletion of dissolved oxygen. While waste stream 2 brings the DO concentration to its minimum point, this minimum is still affected by the DO depletion from waste stream 1. Additional information may change this strategy however. For example, if the cost for treatment is in USD/mg/d, treating only the second waste stream would be less costly.
## Problem 1.6
To estimate the probability that treating both waste streams equally, you can run 1000 random trials with the CBOD and NBOD values of the river inflow varying uniformly.
```julia
using Random, Distributions

function isPos(x)
n=length(x);
y=zeros(n);
for i=1:n
if x[i]>= 0
y[i]=1;
else
y[i]=0;
end
end
return y
end


n=100000;
minTrials=zeros(n);
NBODin=zeros(n);
CBODin=zeros(n);
NBODo1=zeros(n);
CBODo1=zeros(n);
NBODo2=zeros(n);
CBODo2=zeros(n);
Co2=zeros(n);
for i=1:n
CBODin[i]=rand(4:.01:7);
NBODin[i]=rand(3:.01:8);
CBODo1[i]=(10^8*CBODin[i]+50*.97*10^7)/(1.1*10^8);
NBODo1[i]=(10^8*NBODin[i]+35*.97*10^7)/(1.1*10^8);
Co2[i]=(C(15,7.27,CBODo1[i],NBODo1[i])*1.1*10^8+5*1.5*10^7)/(1.25*10^8);
CBODo2[i]=(CBOD(15,CBODo1[i])*1.1*10^8+45*.97*1.5*10^7)/(1.25*10^8);
NBODo2[i]=(NBOD(15,NBODo1[i])*1.1*10^8+35*.97*1.5*10^7)/(1.25*10^8);
DO=zeros(35);
for x=1:35
DO[x]=C(x,Co2[i],CBODo2[i],NBODo2[i])
end
minTrials[i]=minimum(DO);
end

diff=minTrials-4*ones(n);
p=isPos(diff);
successRate=(sum(p))/n
```
Running 100000 random trials with uniformly distributed values for CBOD and NBOD of river inflow, gives a success rate of about .3, meaning about 30% percent of the time the treatment keeps the DO concentration from going below 4 mg/L. This means there is about a 70% chance of failure with the treatment plan of 3% at each waste source.
## Problem 1.7
Assuming the values of CBOD and NBOD for the river inflow are correlated produces different results than if they are independent as they were in 1.6.
```julia; echo=false
# This block will not show up in compiled output.

using Distributions
using PDMats

# This function samples n correlated variates distributed over 
# Uniform([a[1], a[2]]) and Uniform([b[1], b[2]]) with correlation coefficient
# corr_coef.
function sample_correlated_uniform(n, a, b, corr_coef=0.7)
  mvnorm = MvNormal([0, 0], PDMat([1 corr_coef; corr_coef 1])) # set up a multivariate normal with each marginal variance of 1 and the right correlation
  norm_samples = rand(mvnorm, n)' # sample from the multivariate normal, the marginal distributions are a standard normal
  unif_samples = cdf.(Normal(0, 1), norm_samples) # convert samples to a uniform distribution using the pdf of a standard Normal
  samples = (unif_samples .* [a[2] - a[1] b[2] - b[1]]) .+ [a[1] b[1]]
  return samples
end
```
```julia
n=100000;
minTrials=zeros(n);
NBODin=zeros(n);
CBODin=zeros(n);
NBODo1=zeros(n);
CBODo1=zeros(n);
NBODo2=zeros(n);
CBODo2=zeros(n);
Co2=zeros(n);
BODin=sample_correlated_uniform(n,[4,7],[3,8],.7);
for i=1:n
CBODin[i]=BODin[i,1];
NBODin[i]=BODin[i,2];
CBODo1[i]=(10^8*CBODin[i]+50*.97*10^7)/(1.1*10^8);
NBODo1[i]=(10^8*NBODin[i]+35*.97*10^7)/(1.1*10^8);
Co2[i]=(C(15,7.27,CBODo1[i],NBODo1[i])*1.1*10^8+5*1.5*10^7)/(1.25*10^8);
CBODo2[i]=(CBOD(15,CBODo1[i])*1.1*10^8+45*.97*1.5*10^7)/(1.25*10^8);
NBODo2[i]=(NBOD(15,NBODo1[i])*1.1*10^8+35*.97*1.5*10^7)/(1.25*10^8);
DO=zeros(35);
for x=1:35
DO[x]=C(x,Co2[i],CBODo2[i],NBODo2[i])
end
minTrials[i]=minimum(DO);
end

diff=minTrials-4*ones(n);
p=isPos(diff);
successRate=(sum(p))/n
```
When the values of CBOD and NBOD of the river inflow are correlated, the success rate increases to about 36%. This means the failure probability decreases to about 64% as opposed to 70% when the BOD values of river inflow were independent.
## Problem 1.8
The treatment plan of 3% for both waste streams from problem 1.5 is slightly more reliable if the values of CBOD and NBOD of the river inflow are positively correlated as opposed to independent. You could calculate the failure probability for only treating waste stream 2 under both conditions of dependence for CBOD and NBOD values of river inflow. Then, if you know which scenario of dependence of BOD values best fits the actual conditions, you could choose the treatment plan with the lowest probability of failure.


# References